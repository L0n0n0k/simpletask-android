package nl.mpcjanssen.simpletask.dao.app;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nl.mpcjanssen.simpletask.dao.app.LogItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG_ITEM".
*/
public class LogItemDao extends AbstractDao<LogItem, Void> {

    public static final String TABLENAME = "LOG_ITEM";

    /**
     * Properties of entity LogItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Timestamp = new Property(0, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property Severity = new Property(1, String.class, "severity", false, "SEVERITY");
        public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Exception = new Property(4, String.class, "exception", false, "EXCEPTION");
    };


    public LogItemDao(DaoConfig config) {
        super(config);
    }
    
    public LogItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_ITEM\" (" + //
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 0: timestamp
                "\"SEVERITY\" TEXT NOT NULL ," + // 1: severity
                "\"TAG\" TEXT NOT NULL ," + // 2: tag
                "\"MESSAGE\" TEXT NOT NULL ," + // 3: message
                "\"EXCEPTION\" TEXT NOT NULL );"); // 4: exception
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LogItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTimestamp().getTime());
        stmt.bindString(2, entity.getSeverity());
        stmt.bindString(3, entity.getTag());
        stmt.bindString(4, entity.getMessage());
        stmt.bindString(5, entity.getException());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LogItem readEntity(Cursor cursor, int offset) {
        LogItem entity = new LogItem( //
            new java.util.Date(cursor.getLong(offset + 0)), // timestamp
            cursor.getString(offset + 1), // severity
            cursor.getString(offset + 2), // tag
            cursor.getString(offset + 3), // message
            cursor.getString(offset + 4) // exception
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LogItem entity, int offset) {
        entity.setTimestamp(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setSeverity(cursor.getString(offset + 1));
        entity.setTag(cursor.getString(offset + 2));
        entity.setMessage(cursor.getString(offset + 3));
        entity.setException(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LogItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LogItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
