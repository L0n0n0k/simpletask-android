package nl.mpcjanssen.simpletask.dao.todo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nl.mpcjanssen.simpletask.dao.todo.ArchiveItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARCHIVE_ITEM".
*/
public class ArchiveItemDao extends AbstractDao<ArchiveItem, Void> {

    public static final String TABLENAME = "ARCHIVE_ITEM";

    /**
     * Properties of entity ArchiveItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Line = new Property(0, int.class, "line", false, "LINE");
        public final static Property Json = new Property(1, String.class, "json", false, "JSON");
    };


    public ArchiveItemDao(DaoConfig config) {
        super(config);
    }
    
    public ArchiveItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARCHIVE_ITEM\" (" + //
                "\"LINE\" INTEGER NOT NULL ," + // 0: line
                "\"JSON\" TEXT NOT NULL );"); // 1: json
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARCHIVE_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArchiveItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLine());
        stmt.bindString(2, entity.getJson());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ArchiveItem readEntity(Cursor cursor, int offset) {
        ArchiveItem entity = new ArchiveItem( //
            cursor.getInt(offset + 0), // line
            cursor.getString(offset + 1) // json
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArchiveItem entity, int offset) {
        entity.setLine(cursor.getInt(offset + 0));
        entity.setJson(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ArchiveItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ArchiveItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
