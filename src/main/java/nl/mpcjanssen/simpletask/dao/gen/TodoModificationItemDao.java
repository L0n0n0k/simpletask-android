package nl.mpcjanssen.simpletask.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nl.mpcjanssen.simpletask.dao.gen.TodoModificationItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODO_MODIFICATION_ITEM".
*/
public class TodoModificationItemDao extends AbstractDao<TodoModificationItem, Long> {

    public static final String TABLENAME = "TODO_MODIFICATION_ITEM";

    /**
     * Properties of entity TodoModificationItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property File = new Property(2, String.class, "file", false, "FILE");
        public final static Property Action = new Property(3, String.class, "action", false, "ACTION");
        public final static Property From = new Property(4, String.class, "from", false, "FROM");
        public final static Property To = new Property(5, String.class, "to", false, "TO");
    };


    public TodoModificationItemDao(DaoConfig config) {
        super(config);
    }
    
    public TodoModificationItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODO_MODIFICATION_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 1: timestamp
                "\"FILE\" TEXT NOT NULL ," + // 2: file
                "\"ACTION\" TEXT NOT NULL ," + // 3: action
                "\"FROM\" TEXT," + // 4: from
                "\"TO\" TEXT);"); // 5: to
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODO_MODIFICATION_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TodoModificationItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimestamp().getTime());
        stmt.bindString(3, entity.getFile());
        stmt.bindString(4, entity.getAction());
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(6, to);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TodoModificationItem readEntity(Cursor cursor, int offset) {
        TodoModificationItem entity = new TodoModificationItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // timestamp
            cursor.getString(offset + 2), // file
            cursor.getString(offset + 3), // action
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // to
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TodoModificationItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setFile(cursor.getString(offset + 2));
        entity.setAction(cursor.getString(offset + 3));
        entity.setFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TodoModificationItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TodoModificationItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
